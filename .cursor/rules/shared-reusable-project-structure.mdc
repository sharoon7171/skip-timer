---
description: Shared-Reusable Chrome Extension Project Structure - Vite + TypeScript + Tailwind CSS, Zero Code Duplication Strategy
globs:
- "**/core/**"
- "**/utilities/**"
- "**/components/**"
- "**/services/**"
- "**/templates/**"
- "**/styles/**"
- "**/ui/**"
- "**/controllers/**"
- "**/managers/**"
- "**/handlers/**"
- "**/validators/**"
- "**/formatters/**"
- "**/models/**"
- "**/interfaces/**"
- "**/functions/**"
- "**/hooks/**"
- "**/pages/**"
- "**/content-scripts/**"
- "**/types/**"
- "**/vite.config.*"
- "**/tailwind.config.*"
- "**/tsconfig.*"
- "**/project-structure"
- "**/architecture"
alwaysApply: true
priority: critical
---

# Reusable Chrome Extension Project Structure - Vite + TypeScript + Tailwind CSS

## Core Principle: ZERO CODE DUPLICATION (DRY) - TypeScript + Tailwind CSS
- **Write Once, Use Everywhere** - every function/component written once and reused
- **Single Source of Truth** - change once, updates everywhere automatically
- **TypeScript for Logic** - Use .ts/.tsx files for functions, components, and business logic
- **Tailwind CSS for Styling** - Use .css files with Tailwind utilities for all styling
- **HTML for Structure** - Use .html files for page structure and layout
- **Vite Build System** - Modern, fast development and optimized builds
- **Reusable Foundation** - common utilities, patterns, and components organized naturally
- **Reusable Components** - TypeScript + Tailwind UI components used across all pages/contexts
- **Common Services** - TypeScript business logic shared across all features
- **Base Classes** - TypeScript foundational classes that other components extend
- **Type Definitions** - Centralized type definitions for all Chrome extension APIs
- **No Code Duplication** - absolutely no repeated code anywhere in the project
- **Create Only What's Needed** - never create directories/files "just in case"
- **Need-Based Development** - create reusable components only when actually needed
- **Minimal Structure** - start with minimal structure, expand only when required
- **No Premature Optimization** - don't create infrastructure until you need it

## Minimal Project Creation Rules

### ❌ NEVER CREATE UNNECESSARY FILES
- **Don't create placeholder files** - only create files with real functionality
- **Don't create "just in case" files** - create only when actually needed
- **Don't create empty files** - files should contain actual functionality

### ✅ CREATE ONLY WHEN NEEDED (No Empty Directories)
- **Create directories only when creating files** - no empty directory structure
- **Start with minimal project** - only essential files initially
- **Expand structure as needed** - add directories when you add files to them
- **No placeholder directories** - every directory contains actual files

### ✅ MINIMAL PROJECT START (Vite + TypeScript + Tailwind)
```
chrome-extension/
├── manifest.json                    # Only when creating extension
├── vite.config.ts                   # Vite configuration
├── tailwind.config.js               # Tailwind CSS configuration
├── tsconfig.json                    # TypeScript configuration
├── package.json                     # Dependencies and scripts
└── service-worker.ts                # Service worker in TypeScript
```

### ✅ EXPAND STRUCTURE AS NEEDED
When you need to create files, create the directory structure at the same time:

**Example 1: Creating a reusable utility**
```
chrome-extension/
├── manifest.json
├── vite.config.ts
├── tailwind.config.js
├── tsconfig.json
├── service-worker.ts
└── src/
    └── utilities/                  # Created when first file is added
        └── dom-utils.ts            # File and directory created together
```

**Example 2: Adding a popup page**
```
chrome-extension/
├── manifest.json
├── vite.config.ts
├── tailwind.config.js
├── tsconfig.json
├── service-worker.ts
├── src/
│   ├── utilities/
│   │   └── dom-utils.ts
│   └── pages/                      # Created when first file is added
│       └── popup/
│           ├── popup.html          # File and directory created together
│           └── popup.tsx           # React + TypeScript popup
└── index.html                      # Vite entry point
```

**Example 3: Adding reusable components**
```
chrome-extension/
├── manifest.json
├── vite.config.ts
├── tailwind.config.js
├── tsconfig.json
├── service-worker.ts
├── src/
│   ├── utilities/
│   │   └── dom-utils.ts
│   ├── components/                 # Created when first component is added
│   │   └── Button.tsx              # File and directory created together
│   └── pages/
│       └── popup/
│           ├── popup.html
│           └── popup.tsx
└── index.html
```

### ✅ PRINCIPLE: DIRECTORY + FILE CREATION
- **Never create empty directories** - always create with files
- **Create directory structure only when needed** - as you add functionality
- **Start minimal, grow organically** - based on actual requirements
- **No premature structure** - don't create "just in case" directories

### ✅ ORGANIC GROWTH APPROACH

**Start with absolute minimum:**
```
chrome-extension/
├── manifest.json
├── vite.config.ts
├── tailwind.config.js
├── tsconfig.json
└── service-worker.ts
```

**Grow only when you add functionality:**
```
chrome-extension/
├── manifest.json
├── vite.config.ts
├── tailwind.config.js
├── tsconfig.json
├── service-worker.ts
└── src/                      # Created when first reusable file is needed
    └── utilities/
        └── dom-utils.ts      # Directory and file created together
```

**Continue growing as needed:**
```
chrome-extension/
├── manifest.json
├── vite.config.ts
├── tailwind.config.js
├── tsconfig.json
├── service-worker.ts
├── src/
│   ├── utilities/
│   │   └── dom-utils.ts
│   ├── components/                 # Created when first component is needed
│   │   └── Button.tsx              # Directory and file created together
│   └── pages/                      # Created when first page is needed
│       └── popup/
│           ├── popup.html          # Directory and files created together
│           └── popup.tsx
└── index.html
```

## AUTOMATIC COMPONENT CREATION STRATEGY

### ✅ AUTOMATIC COMPONENT CREATION RULES
When creating ANY page (popup, options, welcome), automatically create reusable components for:

**UI Components (Always Create):**
- `Button.tsx` - All button variations (primary, secondary, danger, ghost)
- `Input.tsx` - All input types (text, email, password, number)
- `Toggle.tsx` - Switch/toggle components
- `Select.tsx` - Dropdown select components
- `Checkbox.tsx` - Checkbox inputs
- `Radio.tsx` - Radio button inputs
- `Card.tsx` - Content cards and containers
- `Modal.tsx` - Modal dialogs and popups
- `Badge.tsx` - Status badges and labels
- `Spinner.tsx` - Loading indicators

**Layout Components (Always Create):**
- `Header.tsx` - Page headers with navigation
- `Footer.tsx` - Page footers with links
- `Container.tsx` - Content containers
- `Section.tsx` - Content sections
- `Sidebar.tsx` - Navigation sidebars (for options page)

**Form Components (Always Create):**
- `FormField.tsx` - Form field wrapper with labels and validation
- `FormSection.tsx` - Form section grouping
- `FormGroup.tsx` - Form field groups

### ✅ AUTOMATIC COMPONENT CREATION EXAMPLES

**When User Says: "Create options page"**
```
AUTOMATICALLY CREATE:
├── src/components/ui/
│   ├── Button.tsx          # ✅ Auto-created
│   ├── Input.tsx           # ✅ Auto-created
│   ├── Toggle.tsx          # ✅ Auto-created
│   ├── Select.tsx          # ✅ Auto-created
│   ├── Checkbox.tsx        # ✅ Auto-created
│   ├── Card.tsx            # ✅ Auto-created
│   └── index.ts            # ✅ Auto-created
├── src/components/layout/
│   ├── Header.tsx          # ✅ Auto-created
│   ├── Footer.tsx          # ✅ Auto-created
│   ├── Container.tsx       # ✅ Auto-created
│   ├── Section.tsx         # ✅ Auto-created
│   ├── Sidebar.tsx         # ✅ Auto-created
│   └── index.ts            # ✅ Auto-created
├── src/components/forms/
│   ├── FormField.tsx       # ✅ Auto-created
│   ├── FormSection.tsx     # ✅ Auto-created
│   ├── FormGroup.tsx       # ✅ Auto-created
│   └── index.ts            # ✅ Auto-created
└── src/pages/options/
    ├── options.html        # ✅ Main page
    ├── options.tsx         # ✅ Uses all components
    └── options.css         # ✅ Page-specific styles
```

**When User Says: "Create popup page"**
```
AUTOMATICALLY CREATE:
├── src/components/ui/
│   ├── Button.tsx          # ✅ Auto-created (if not exists)
│   ├── Input.tsx           # ✅ Auto-created (if not exists)
│   ├── Card.tsx            # ✅ Auto-created (if not exists)
│   └── index.ts            # ✅ Auto-created
├── src/components/layout/
│   ├── Header.tsx          # ✅ Auto-created (if not exists)
│   ├── Container.tsx       # ✅ Auto-created (if not exists)
│   └── index.ts            # ✅ Auto-created
└── src/pages/popup/
    ├── popup.html          # ✅ Main page
    ├── popup.tsx           # ✅ Uses all components
    └── popup.css           # ✅ Page-specific styles
```

### ✅ COMPONENT REUSABILITY STRATEGY

**Single Source of Truth:**
- **One Button.tsx** - Used in popup, options, welcome pages
- **One Input.tsx** - Used in all forms across all pages
- **One Card.tsx** - Used for content display in all pages
- **One Header.tsx** - Consistent header across all pages

**Automatic Updates:**
- **Change Button.tsx once** → Updates everywhere automatically
- **Change Input.tsx once** → All forms update automatically
- **Change Card.tsx once** → All content cards update automatically

**Example: Button Component Usage**
```typescript
// src/components/ui/Button.tsx (SINGLE SOURCE)
export const Button: React.FC<ButtonProps> = ({ variant, size, children, ...props }) => {
  return (
    <button className={`btn-${variant} btn-${size}`} {...props}>
      {children}
    </button>
  );
};

// src/pages/popup/popup.tsx (USES COMPONENT)
import { Button } from '@/components/ui/Button';
<Button variant="primary" size="md">Save</Button>

// src/pages/options/options.tsx (USES SAME COMPONENT)
import { Button } from '@/components/ui/Button';
<Button variant="secondary" size="lg">Cancel</Button>

// src/pages/welcome/welcome.tsx (USES SAME COMPONENT)
import { Button } from '@/components/ui/Button';
<Button variant="primary" size="xl">Get Started</Button>
```

## When to Create Reusable Components

### ✅ CREATE REUSABLE COMPONENTS WHEN:
- **You have duplicate code** - same function appears in 2+ places
- **You need reusable UI** - same component used across multiple pages
- **You have common business logic** - same service logic used in multiple features
- **You have repeated utilities** - same helper functions used everywhere
- **You have common patterns** - same base functionality needed by multiple components
- **Creating ANY page** - automatically create all UI components for that page

### ❌ DON'T CREATE REUSABLE COMPONENTS WHEN:
- **"Maybe we'll need this"** - creating for future hypothetical use
- **"It might be useful"** - creating without immediate need
- **"Just in case"** - creating placeholder infrastructure
- **"Best practice"** - creating structure you think you should have
- **"Following patterns"** - creating components to match a pattern without actual need

### ✅ REUSABLE COMPONENT CREATION EXAMPLES

**Scenario 1: You have duplicate DOM manipulation code**
```typescript
// ❌ BEFORE: Duplicate code in multiple files
// popup-page.tsx
const createButton = (text: string) => {
  const button = document.createElement('button');
  button.textContent = text;
  button.className = 'btn-primary';
  return button;
};

// options-page.tsx  
const createButton = (text: string) => {
  const button = document.createElement('button');
  button.textContent = text;
  button.className = 'btn-primary';
  return button;
};

// ✅ AFTER: Create reusable utility when you have duplication
// src/utilities/dom-utils.ts
export const createButton = (text: string) => {
  const button = document.createElement('button');
  button.textContent = text;
  button.className = 'btn-primary';
  return button;
};

// Now both pages import and use the reusable function
```

**Scenario 2: You need the same API service in multiple places**
```typescript
// ❌ BEFORE: Duplicate API logic
// popup-page.tsx
const fetchUserData = async (userId: string) => {
  const response = await fetch(`/api/users/${userId}`);
  return response.json();
};

// content-script.ts
const fetchUserData = async (userId: string) => {
  const response = await fetch(`/api/users/${userId}`);
  return response.json();
};

// ✅ AFTER: Create reusable service when you have duplication
// src/services/api-service.ts
export class ApiService {
  static async fetchUserData(userId: string) {
    const response = await fetch(`/api/users/${userId}`);
    return response.json();
  }
}

// Now both files import and use the reusable service
```

## Service Worker vs Background Script Architecture

### Service Worker (Manifest V3)
- **Entry Point**: `service-worker.ts` (root level, compiled by Vite)
- **Purpose**: Chrome extension background script (replaces background pages)
- **Location**: Root level for manifest.json reference
- **Compilation**: Vite compiles from `src/background/` to root level

### Background Scripts (Source Code)
- **Source Location**: `src/background/` directory
- **Purpose**: Organized background script logic and handlers
- **Structure**: Modular TypeScript files for maintainability
- **Compilation**: Vite bundles these into the root `service-worker.ts`

### Key Differences
- **Service Worker**: The actual file Chrome loads (compiled output)
- **Background Scripts**: Source code organization (development files)
- **Separation**: Source code is organized, compiled output is single file

### Vite Build Configuration
```typescript
// vite.config.ts - Service worker compilation
export default defineConfig({
  build: {
    rollupOptions: {
      input: {
        // Service worker entry point
        'service-worker': resolve(__dirname, 'src/background/service-worker.ts'),
        // Other entry points
        popup: resolve(__dirname, 'src/pages/popup/popup.html'),
        options: resolve(__dirname, 'src/pages/options/options.html'),
        content: resolve(__dirname, 'src/content-scripts/main-content-script.ts')
      },
      output: {
        entryFileNames: '[name].js',
        chunkFileNames: '[name].js',
        assetFileNames: '[name].[ext]'
      }
    }
  }
});
```

## Complete REUSABLE Project Structure (Vite + TypeScript + Tailwind CSS)
```
chrome-extension/
├── manifest.json                           # Extension configuration
├── vite.config.ts                          # Vite build configuration
├── tailwind.config.js                      # Tailwind CSS configuration
├── tsconfig.json                           # TypeScript configuration
├── package.json                            # Dependencies and scripts
├── index.html                              # Vite entry point
├── service-worker.ts                       # Service worker entry point (compiled from src/background/)
│
├── src/
│   ├── types/                              # TypeScript type definitions
│   │   ├── chrome-api.types.ts            # Chrome extension API types
│   │   ├── service-worker.types.ts        # Single service worker types
│   │   ├── content-script.types.ts        # Multiple content script types
│   │   ├── component.types.ts             # Component prop types
│   │   ├── api.types.ts                   # API response types
│   │   └── index.ts                       # Re-export all types
│   │
│   ├── core/                               # CORE FOUNDATION (Zero Duplication)
│   │   ├── base-classes.ts                # Base classes for all components
│   │   ├── common-interfaces.ts           # Reusable interfaces
│   │   ├── error-handling.ts              # Centralized error handling
│   │   ├── logging.ts                     # Centralized logging
│   │   ├── constants.ts                   # All constants in one place
│   │   ├── config.ts                      # Centralized configuration
│   │   └── index.ts                       # Re-export all core modules
│   │
│   ├── utilities/                          # Reusable utility functions
│   │   ├── dom-utils.ts                   # DOM manipulation utilities
│   │   ├── data-utils.ts                  # Data processing utilities
│   │   ├── validation-utils.ts            # Validation utilities
│   │   ├── formatting-utils.ts            # Formatting utilities
│   │   ├── async-utils.ts                 # Async operation utilities
│   │   ├── storage-utils.ts               # Storage operation utilities
│   │   ├── messaging-utils.ts             # Messaging utilities
│   │   ├── chrome-api-utils.ts            # Chrome API utilities
│   │   └── index.ts                       # Re-export all utilities
│   │
│   ├── components/                         # Reusable UI components (React + TypeScript)
│   │   ├── ui/                            # Basic UI components
│   │   │   ├── Button.tsx                 # Reusable button component
│   │   │   ├── Input.tsx                  # Reusable input component
│   │   │   ├── Modal.tsx                  # Reusable modal component
│   │   │   ├── Card.tsx                   # Reusable card component
│   │   │   ├── Badge.tsx                  # Reusable badge component
│   │   │   ├── Spinner.tsx                # Reusable spinner component
│   │   │   ├── Toggle.tsx                 # Reusable toggle component
│   │   │   ├── Select.tsx                 # Reusable select component
│   │   │   ├── Checkbox.tsx               # Reusable checkbox component
│   │   │   ├── Radio.tsx                  # Reusable radio component
│   │   │   └── index.ts                   # Re-export all UI components
│   │   │
│   │   ├── forms/                         # Form components
│   │   │   ├── FormField.tsx              # Form field wrapper
│   │   │   ├── FormSection.tsx            # Form section wrapper
│   │   │   ├── FormGroup.tsx              # Form group wrapper
│   │   │   └── index.ts                   # Re-export form components
│   │   │
│   │   ├── layout/                        # Layout components
│   │   │   ├── Header.tsx                 # Page header
│   │   │   ├── Footer.tsx                 # Page footer
│   │   │   ├── Sidebar.tsx                # Sidebar navigation
│   │   │   ├── Container.tsx              # Content container
│   │   │   ├── Section.tsx                # Content section
│   │   │   └── index.ts                   # Re-export layout components
│   │   │
│   │   └── index.ts                       # Re-export all components
│   │
│   ├── services/                           # Reusable business logic
│   │   ├── api-service.ts                 # Centralized API service
│   │   ├── storage-service.ts             # Centralized storage service
│   │   ├── messaging-service.ts           # Centralized messaging service
│   │   ├── validation-service.ts          # Centralized validation service
│   │   ├── formatting-service.ts          # Centralized formatting service
│   │   ├── error-service.ts               # Centralized error service
│   │   └── index.ts                       # Re-export all services
│   │
│   ├── hooks/                              # Reusable logic hooks (React)
│   │   ├── use-storage.ts                 # Storage hook
│   │   ├── use-messaging.ts               # Messaging hook
│   │   ├── use-validation.ts              # Validation hook
│   │   ├── use-formatting.ts              # Formatting hook
│   │   ├── use-api.ts                     # API hook
│   │   ├── use-theme.ts                   # Theme management hook
│   │   └── index.ts                       # Re-export all hooks
│   │
│   ├── features/                           # REUSABLE FEATURES (Composed from core/)
│   │   ├── ui/                            # Reusable UI features
│   │   │   ├── search-feature.tsx         # Search functionality
│   │   │   ├── filter-feature.tsx         # Filter functionality
│   │   │   ├── sort-feature.tsx           # Sort functionality
│   │   │   ├── pagination-feature.tsx     # Pagination functionality
│   │   │   └── navigation-feature.tsx     # Navigation functionality
│   │   │
│   │   ├── data/                          # Reusable data features
│   │   │   ├── data-manager.ts            # Data management
│   │   │   ├── cache-manager.ts           # Cache management
│   │   │   ├── sync-manager.ts            # Sync management
│   │   │   └── backup-manager.ts          # Backup management
│   │   │
│   │   └── integration/                   # Reusable integrations
│   │       ├── chrome-integration.ts      # Chrome API integration
│   │       ├── api-integration.ts         # External API integration
│   │       └── storage-integration.ts     # Storage integration
│   │
│   ├── content-scripts/                    # MULTIPLE CONTENT SCRIPTS (Main Functionality)
│   │   ├── main-content-script.ts         # Main content script functionality
│   │   ├── overlay-content-script.ts      # Overlay content script functionality
│   │   ├── injection-content-script.ts    # Injection content script functionality
│   │   ├── analytics-content-script.ts    # Analytics content script functionality
│   │   ├── ui-content-script.ts           # UI content script functionality
│   │   └── index.ts                       # Re-export content scripts
│   │
│   ├── background/                         # SINGLE SERVICE WORKER (Communication Hub)
│   │   ├── service-worker.ts              # Single service worker - communication hub
│   │   ├── message-router.ts              # Message routing between content scripts
│   │   ├── storage-manager.ts             # Storage operations for content scripts
│   │   ├── api-bridge.ts                  # API bridge for content scripts
│   │   └── index.ts                       # Re-export service worker modules
│   │
│   ├── pages/                             # PAGE COMPONENTS (React + TypeScript)
│   │   ├── popup/                         # Popup page
│   │   │   ├── popup.html                 # Popup HTML template
│   │   │   ├── popup.tsx                  # Popup React component
│   │   │   └── popup.css                  # Popup-specific styles
│   │   │
│   │   ├── options/                       # Options page
│   │   │   ├── options.html               # Options HTML template
│   │   │   ├── options.tsx                # Options React component
│   │   │   └── options.css                # Options-specific styles
│   │   │
│   │   └── welcome/                       # Welcome page (optional)
│   │       ├── welcome.html               # Welcome HTML template
│   │       ├── welcome.tsx                # Welcome React component
│   │       └── welcome.css                # Welcome-specific styles
│   │
│   ├── styles/                            # Tailwind CSS styles
│   │   ├── main.css                       # Main Tailwind CSS file
│   │   ├── components.css                 # Component-specific styles
│   │   └── utilities.css                  # Custom utility classes
│   │
│   └── assets/                             # Static assets
│       ├── icons/                          # Extension icons
│       │   ├── icon-16.png                 # 16px icon
│       │   ├── icon-48.png                 # 48px icon
│       │   ├── icon-128.png                # 128px icon
│       │   └── icon.svg                    # Vector icon
│       │
│       ├── images/                         # Images and graphics
│       │   ├── logo.svg                    # Extension logo
│       │   ├── placeholder.svg             # Placeholder image
│       │   └── background.svg              # Background image
│       │
│       └── fonts/                          # Custom fonts
│           ├── inter.woff2                 # Inter font
│           └── inter-variable.woff2        # Inter variable font
│
├── tests/                                  # Test files (Vitest + TypeScript)
│   ├── unit/                              # Unit tests
│   │   ├── components/                    # Component tests
│   │   ├── services/                      # Service tests
│   │   ├── utilities/                     # Utility tests
│   │   └── hooks/                         # Hook tests
│   │
│   ├── integration/                       # Integration tests
│   │   ├── messaging.test.ts              # Message passing tests
│   │   ├── storage.test.ts                # Storage tests
│   │   └── api.test.ts                    # API tests
│   │
│   └── e2e/                               # End-to-end tests
│       ├── popup.test.ts                  # Popup E2E tests
│       ├── options.test.ts                # Options E2E tests
│       └── content-script.test.ts         # Content script E2E tests
│
├── config/                                 # Configuration files
│   ├── vite.config.ts                     # Vite configuration
│   ├── tailwind.config.js                 # Tailwind CSS configuration
│   ├── tsconfig.json                      # TypeScript configuration
│   ├── vitest.config.ts                   # Vitest configuration
│   ├── eslint.config.js                   # ESLint configuration
│   └── prettier.config.js                 # Prettier configuration
│
└── scripts/                               # Build and development scripts
    ├── build.ts                          # Build script
    ├── dev.ts                            # Development script
    ├── test.ts                           # Test script
    ├── package.ts                        # Package script
    └── deploy.ts                          # Deployment script
```

## TypeScript + Tailwind CSS + Vite Benefits

### Zero Duplication Benefits (DRY Principle)
- **Write Once, Use Everywhere** - Every function/component written once and reused
- **Single Source of Truth** - Change once, updates everywhere automatically
- **No Code Duplication** - Absolutely no repeated code anywhere in the project
- **Consistent Behavior** - Same functionality works identically across all features
- **Reduced Maintenance** - Fix bugs once, they're fixed everywhere

### TypeScript Benefits
- **Type Safety** - Catch errors at compile time, not runtime
- **Better IDE Support** - IntelliSense, autocomplete, and refactoring
- **Self-Documenting Code** - Types serve as documentation
- **Easier Refactoring** - Safe code changes with type checking
- **Better Team Collaboration** - Clear interfaces and contracts
- **See @typescript-standards** - for detailed TypeScript patterns and best practices

### Tailwind CSS Benefits
- **Utility-First** - Rapid UI development with consistent design
- **Responsive Design** - Built-in responsive utilities
- **Dark Mode** - Easy dark mode implementation
- **Performance** - Only used styles are included in final bundle
- **Consistency** - Design system enforced through utilities
- **See @tailwind-css-standards** - for comprehensive styling guidelines

### Vite Benefits
- **Fast Development** - Hot Module Replacement (HMR)
- **Optimized Builds** - Tree-shaking and code splitting
- **Modern Tooling** - ES modules, TypeScript support
- **Plugin Ecosystem** - Rich plugin system for extensions
- **Fast Cold Start** - Instant server start
- **See @vite-build-standards** - for build configuration and optimization

### Chrome Extension Specific Benefits
- **Manifest V3 Optimized** - Perfect alignment with Chrome's module system
- **Type-Safe APIs** - All Chrome extension APIs properly typed
- **Modern Build System** - Vite handles all bundling and optimization
- **Component Reusability** - React components work across popup, options, and content scripts
- **Performance Optimized** - Minimal bundle size with maximum functionality
- **See @chrome-extension-development** - for core development patterns